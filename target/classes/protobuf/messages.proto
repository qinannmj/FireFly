package protocolbuffer;
option java_package = "cn.com.sparkle.firefly.protocolprocessor.v0_0_1";
option java_outer_classname = "PaxosMessages";

import "store.proto";

message MessagePackage{
	required int64 id =1;
	required bool isLast = 2;
	optional HeartBeatRequest heartBeatRequest = 3;
	optional SenatorHeartBeatResponse senatorHeartBeatResponse=4;
	optional VoteResponse voteResponse=5;
	optional PrepareResponseBad prepareResponseBad=6;
	optional PrepareResponseGood prepareResponseGood=7;
	optional LookUpLatestInstanceIdResponse lookUpLatestInstanceIdResponse=8;
	optional CatchUpResponse catchUpResponse=9;
	optional AddRequest addRequest=10;
	optional AddResponse addResponse=11;
	optional ElectionPrepareRequest electionPrepareRequest=12;
	optional ElectionVoteRequest electionVoteRequest=13;
	optional ElectionSuccessMessage electionSuccessMessage=14;
	optional InstanceSuccessMessage instanceSuccessMessage=15;
	optional LookUpLatestInstanceIdRequest lookUpLatestInstanceIdRequest=16;
	optional InstancePrepareRequest instancePrepareRequest=17;
	optional InstanceVoteRequest instanceVoteRequest=18;
	optional GetNewsSenatorsRequest getNewsSenatorsRequest=19;
	optional GetNewsSenatorsResponse getNewsSenatorsResponse=20;
	optional CommandResponse commandResponse=21;
	optional CatchUpRequest catchUpRequest= 23;
	optional ConnectRequest connectRequest =24;
	optional InstanceSuccessResponse instanceSuccessResponse=25;

	optional ActiveHeartBeatRequest ActiveHeartBeatRequest = 28;
	optional ConnectResponse connectResponse=29;
}

message HeartBeatRequest{
}
message ActiveHeartBeatRequest{
	required string address=1;
	required SenatorHeartBeatResponse heartBeatResponse=2;
	
}
message SenatorHeartBeatResponse{
	required int64 lastCanExecuteInstanceId=1;
	required bool isMasterConnected=2;
	required string electionAddress=3;
	required int64 electionId=4;
	required int64 electionVersion=5;
	required bool isInited=6;
	required bool isUpToDate =7;
	required int32 masterDistance=8;
	repeated string connectedValidNodes=9;
}

message LookUpLatestInstanceIdRequest{
}

message GetNewsSenatorsRequest{
}

message GetNewsSenatorsResponse{
	required int64 version=1;
	repeated string senators=2;
	required Id master=3;
}

message CatchUpRequest{
	required int64 startInstanceId=1;
	required int32 size=2;
}
message CatchUpResponse{
	repeated CatchUpRecord successfulRecords=1;
}
message CatchUpRecord{
	required int64 instanceId=1;
	required SuccessfulRecord value=2;
}

message InstancePrepareRequest{
	required int64 instanceId=1;
	required Id id=2;
	repeated string chain=3;
}
message PrepareResponseBad{
	required int64 lastPrepareId=1;
	optional Value successValue=2;
}
message PrepareResponseGood{
	required Id lastVotedId=1;
	optional Value value=2;
}
message InstanceVoteRequest{
	required int64 instanceId=1;
	required Id voteId=2;
	required Value value=3;
	repeated string chain=4;
}
message VoteResponse{
	required int64 refuseId=1;
	optional Value successValue=2;
}

message ElectionPrepareRequest{
	required ElectionId id=1;
	required int64 lastVoteId=2;
}

message ElectionVoteRequest{
	required ElectionId id=1;
	required int64 lastVoteId=2;
}

message ElectionSuccessMessage{
	required ElectionId id=1;
}


message LookUpLatestInstanceIdResponse{
	required int64 instanceId=1;
}

message InstanceSuccessMessage{
	required int64 id=1;
	optional Value value=2;
	required Id highestVoteNum=3;
	repeated string notifyAddress=4;
	repeated InstanceSuccessTransport notifyChain=5;
}
message InstanceSuccessTransport{
	required string address=1;
	repeated string notifyAddress=2;
	required bool isTransValue=3;
}

message InstanceSuccessResponse{
}
message ElectionId{
	required Id id=1;
	required int64 version=2;
}

message CommandResponse{
	required bool isSuccessful=1;
	required string error=2;
}

message AddRequest{
	required int32 commandType=1;
	required bytes value=2;
	optional int64 instanceId=3;
}

message AddResponse{
	required bytes result=1;
	optional int64 instanceId=2;
}
message ConnectRequest{
	required int32 masterDistance=1;
}
message ConnectResponse{
	required bool isSuccessful=1;
}
